#define BOOST_TEST_MODULE CppNotes cppnotestest

#include "algorithms/data_structures/array/test_remove_duplicates_in_array.hpp"
#include "algorithms/data_structures/array/test_rotate_array.hpp"
#include "algorithms/data_structures/array/test_duplicates_in_array.hpp"
#include "algorithms/data_structures/array/test_intersection_of_two_arrays.hpp"
#include "algorithms/data_structures/array/test_remove_elements_equal_to_value.hpp"
#include "algorithms/data_structures/array/test_fast_sum_of_range.hpp"
#include "algorithms/data_structures/array/test_fast_sum_of_matrix.hpp"
#include "algorithms/data_structures/array/test_find_pivot_index.hpp"
#include "algorithms/data_structures/array/test_find_largest_num_twice_of_others.hpp"
#include "algorithms/data_structures/array/test_matrix_traverses.hpp"
#include "algorithms/data_structures/array/test_pascals_triangle.hpp"
#include "algorithms/data_structures/array/test_max_consecutive_equal_elements.hpp"
#include "algorithms/data_structures/array/test_search_insert_position.hpp"
#include "algorithms/data_structures/array/test_array_permutations.hpp"
#include "algorithms/data_structures/array/test_swap_min_and_max.hpp"
#include "algorithms/data_structures/array/test_find_first_and_last_pos.hpp"
#include "algorithms/data_structures/array/test_summary_ranges.hpp"
#include "algorithms/data_structures/array/test_merge_sorted_arrays.hpp"
#include "algorithms/data_structures/array/test_majority_element.hpp"
#include "algorithms/data_structures/array/test_find_kth_largest_element.hpp"
#include "algorithms/data_structures/array/test_container_with_most_water.hpp"
#include "algorithms/data_structures/array/test_insert_interval.hpp"
#include "algorithms/data_structures/array/test_median_of_two_sorted_arrays.hpp"
#include "algorithms/data_structures/array/test_num_is_sum_of_square_numbers.hpp"
#include "algorithms/data_structures/array/test_plus_one_to_number_as_array.hpp"
#include "algorithms/data_structures/array/test_max_subarray_product.hpp"
#include "algorithms/data_structures/array/test_max_subarray_sum.hpp"
#include "algorithms/data_structures/array/test_min_subarray_equal_to_value.hpp"
#include "algorithms/data_structures/array/test_find_max_product_of_two_elements.hpp"

#include "algorithms/data_structures/bt/test_max_depth_of_bt.hpp"
#include "algorithms/data_structures/bt/test_validate_bt.hpp"
#include "algorithms/data_structures/bt/test_bt_preorder_traversal.hpp"
#include "algorithms/data_structures/bt/test_bt_inorder_traversal.hpp"
#include "algorithms/data_structures/bt/test_bt_postorder_traversal.hpp"
#include "algorithms/data_structures/bt/test_bt_level_order_traversal.hpp"

#include "algorithms/data_structures/sll/test_palindrome_sll.hpp"
#include "algorithms/data_structures/sll/test_cyclic_sll.hpp"
#include "algorithms/data_structures/sll/test_remove_dup_linked_list.hpp"
#include "algorithms/data_structures/sll/test_find_k_to_last_elem_in_sll.hpp"
#include "algorithms/data_structures/sll/test_delete_node_from_sll.hpp"
#include "algorithms/data_structures/sll/test_partition_linked_list.hpp"
#include "algorithms/data_structures/sll/test_reverse_sll.hpp"
#include "algorithms/data_structures/sll/test_delete_k_to_last_elem_in_sll.hpp"
#include "algorithms/data_structures/sll/test_find_middle_of_sll.hpp"
#include "algorithms/data_structures/sll/test_remove_value_from_sll.hpp"
#include "algorithms/data_structures/sll/test_merge_sorted_sll.hpp"
#include "algorithms/data_structures/sll/test_add_two_numbers_as_linked_list.hpp"

#include "algorithms/math/test_basic_matrix_multiplication.hpp"
#include "algorithms/math/test_basic_numbers_multiplication.hpp"
#include "algorithms/math/test_is_number_power_of_two.hpp"
#include "algorithms/math/test_karatsuba_multiplication.hpp"
#include "algorithms/math/test_strassen_matrix_multiplication.hpp"
#include "algorithms/math/test_primes.hpp"
#include "algorithms/math/test_parallel_lines.hpp"
#include "algorithms/math/test_int_operators.hpp"
#include "algorithms/math/test_rotate_matrix.hpp"
#include "algorithms/math/test_matrix_zero_out.hpp"
#include "algorithms/math/test_calc_angle_btw_clock_hands.hpp"
#include "algorithms/math/test_sum_of_multiples.hpp"
#include "algorithms/math/test_hamming_distance.hpp"
#include "algorithms/math/test_hamming_weight.hpp"
#include "algorithms/math/test_bitwise_operators.hpp"
#include "algorithms/math/test_hamming_distance_of_array.hpp"
#include "algorithms/math/test_hamming_weight_of_array.hpp"
#include "algorithms/math/test_square_root.hpp"
#include "algorithms/math/test_valid_perfect_square.hpp"
#include "algorithms/math/test_reverse_integer.hpp"
#include "algorithms/math/test_fibonacci_numbers.hpp"
#include "algorithms/math/test_greates_common_divisor.hpp"
#include "algorithms/math/test_knapsack_problem.hpp"
#include "algorithms/math/test_polynomial_multiplication.hpp"
#include "algorithms/math/test_int_to_roman.hpp"
#include "algorithms/math/test_roman_to_int.hpp"
#include "algorithms/math/test_least_common_multiple.hpp"
#include "algorithms/math/test_coin_change.hpp"
#include "algorithms/math/test_car_fueling.hpp"
#include "algorithms/math/test_primitive_calculator.hpp"
#include "algorithms/math/test_partition_equally.hpp"

#include "algorithms/other/test_buy_sell_stock.hpp"
#include "algorithms/other/test_buy_sell_stock_one_transaction.hpp"
#include "algorithms/other/test_valid_sudoku.hpp"

#include "algorithms/search/test_binary_search.hpp"
#include "algorithms/search/test_find_two_elements.hpp"
#include "algorithms/search/test_jump_search.hpp"
#include "algorithms/search/test_interpolation_search.hpp"
#include "algorithms/search/test_exponential_search.hpp"
#include "algorithms/search/test_find_single_item.hpp"
#include "algorithms/search/test_find_single_item_in_sorted_array.hpp"
#include "algorithms/search/test_search_in_rotated_sorted_array.hpp"
#include "algorithms/search/test_find_three_sum.hpp"
#include "algorithms/search/test_find_three_sum_closest.hpp"
#include "algorithms/search/test_find_next_greater_element.hpp"
#include "algorithms/search/test_find_array_max_special_product.hpp"

#include "algorithms/sorting/test_bubble_sort.hpp"
#include "algorithms/sorting/test_gnome_sort.hpp"
#include "algorithms/sorting/test_selection_sort.hpp"
#include "algorithms/sorting/test_insertion_sort.hpp"
#include "algorithms/sorting/test_inversions_counter.hpp"
#include "algorithms/sorting/test_merge_sort.hpp"
#include "algorithms/sorting/test_quicksort.hpp"
#include "algorithms/sorting/test_quicksort_research.hpp"
#include "algorithms/sorting/test_counting_sort.hpp"
#include "algorithms/sorting/test_heap_sort.hpp"

#include "algorithms/strings/test_longest_palindrome.hpp"
#include "algorithms/strings/test_longest_substring.hpp"
#include "algorithms/strings/test_ransome_note.hpp"
#include "algorithms/strings/test_str_permutations.hpp"
#include "algorithms/strings/test_str_unique_char.hpp"
#include "algorithms/strings/test_str_reverse.hpp"
#include "algorithms/strings/test_is_str_permutation.hpp"
#include "algorithms/strings/test_str_replace_spaces.hpp"
#include "algorithms/strings/test_str_compression.hpp"
#include "algorithms/strings/test_str_is_substring.hpp"
#include "algorithms/strings/test_sum_of_binary_strings.hpp"
#include "algorithms/strings/test_find_unique_char_in_str.hpp"
#include "algorithms/strings/test_valid_palindrome.hpp"
#include "algorithms/strings/test_str_to_integer.hpp"
#include "algorithms/strings/test_count_and_say.hpp"
#include "algorithms/strings/test_two_str_are_valid_anagram.hpp"
#include "algorithms/strings/test_valid_parentheses.hpp"
#include "algorithms/strings/test_reverse_words_in_string.hpp"
#include "algorithms/strings/test_edit_distance.hpp"

#include "files/test_read_last_lines.hpp"

#include "pointers/test_shared_pointer.hpp"

#include "types/ds/test_binary_search_tree.hpp"
#include "types/ds/test_concurrent_map.hpp"
#include "types/ds/test_linked_list.hpp"
#include "types/ds/test_matrix.hpp"
#include "types/ds/test_vector_ds.hpp"
#include "types/ds/test_heap.hpp"
#include "types/ds/test_interval_map.hpp"
#include "types/test_vector_iterator.hpp"
